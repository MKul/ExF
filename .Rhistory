}
#forgetting
tn <- recomputeWeights(tn,dt,norm,tr)
#count active nodes and components
an_cn <- countActiveNodes(tn)
anCnPerTime <- rbind(anCnPerTime,an_cn)
#an <- temp[1]
#cn <- temp[2]
#print(paste("# of active nodes:",toString(an)," # of components:",toString(cn),sep=""))
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
#removing vertex - removes edges connected to removed vertex: tn <- delete.vertices(tn,'name')
#removing edges - does not removing vertex: tn <- delete.edges(tn,E(tn,c("3","6")))
}
close(pb)
return(c(tn,anCnPerTime))
}
results <- runEvents(threshold, norm,unit,symdt,show)
tn
n
E(n)
E(n)$weight
n <- graph.empty(directed=FALSE)
n <- n + vertex("1")
n <- n + vertex("3")
n <- n + vertex("4")
n <- n + vertex("2")
n <- n + edge("1","3")
n <- n + edge("1","2")
n <- n + edge("4","2")
n <- n + vertex("5")
n <- n + vertex("6")
n <- n + vertex("7")
n <- n + vertex("8")
n <- n + edge("6","7")
n <- n + edge("8","7")
n <- graph.empty(directed=FALSE)
n <- n + vertex("1")
n <- n + vertex("3")
n <- n + vertex("4")
n <- n + vertex("2")
n <- n + vertex("5")
n <- n + vertex("6")
n <- n + vertex("7")
n <- n + vertex("8")
n <- n + edge("1","3",weight=1.0)
n <- n + edge("1","2",weight=0.9)
n <- n + edge("4","2",weight=0.5)
n <- n + edge("6","7",weight=0.6)
n <- n + edge("8","7",weight=0.2)
n
E(n)
E(n)$weight
n <- n + edge("1","7",weight=0.25)
n <- n + edge("2","7",weight=0.224)
n <- n + edge("3","7",weight=0.51)
n <- n + edge("2","7",weight=0.224)
E(n)$weight
n <- n + edge("2","8",weight=0.3)
n <- n + edge("1","8",weight=0.95)
hist(E(n)$weight)
hist(E(n)$weight,breaks=10)
n <- n + edge("1","4",weight=0.01)
hist(E(n)$weight,breaks=10)
h=hist(E(n)$weight,breaks=10)
h
h$counts
dev.off()
h=hist(E(n)$weight,breaks=10)
h=hist(E(n)$weight,breaks=10,plot=FALSE)
countWeights <- function(n,bins){
h=hist(E(n)$weight,breaks=bins,plot=FALSE)
return(h$counts)
}
runEvents <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Progress","%",1,nrow(data))
lastEventTime = as.POSIXct(data[1,3])
anCnPerEvent = matrix(c(0,0),ncol=2)
weightHist = matrix(ncol=bins)
for(i in 1:nrow(data)){
#read next event
s = toString(data[i,1])
r = toString(data[i,2])
t = as.POSIXct(data[i,3])
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 0
E(tn,P=c(s,r))$lt <- 0
}
#forgetting
tn <- recomputeWeights(tn,dt,norm,tr)
#count active nodes and components
an_cn <- countActiveNodes(tn)
#count weights and prepare histogram
h <- countWeights(tn,bins)
weightHist <- rbind(weightHist,h)
anCnPerEvent <- rbind(anCnPerEvent,an_cn)
#an <- temp[1]
#cn <- temp[2]
#print(paste("# of active nodes:",toString(an)," # of components:",toString(cn),sep=""))
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
#removing vertex - removes edges connected to removed vertex: tn <- delete.vertices(tn,'name')
#removing edges - does not removing vertex: tn <- delete.edges(tn,E(tn,c("3","6")))
}
close(pb)
return(c(tn,anCnPerEvent,weightHist))
}
results <- runEvents(threshold, norm, unit, symdt, show, bins)
bins = 100
results <- runEvents(threshold, norm, unit, symdt, show, bins)
debugSource('D:/_Politechnika_Wroclawska/Projekty/ExF/ExF/ExF.R')
debugSource('D:/_Politechnika_Wroclawska/Projekty/ExF/ExF/ExF.R')
ecount(tn)
typeof(c(1,2,3))
typeof(c("1",2,3))
typeof(c(TRUE,2,3))
typeof(c(TRUE,"4",3))
typeof(c(TRUE,"4",3.4))
c(1,10)
help(c())
help(c
)
c(1:10)
1:10
matrix(0,col=100)
matrix(0,col=100)
matrix(0,ncol=100)
m = matrix(0,ncol=100)
m <- rbind(m,matrix(1,ncol=100))
m
m = matrix(0,ncol=5)
m <- rbind(m,matrix(1,ncol=5))
m
m <- rbind(m,c(2,2,2,2,2))
m
countWeights <- function(n,bins){
if(ecount(n)>0){
h=hist(E(n)$weight,breaks=bins,plot=FALSE)
return(h$counts)
}else{
return(matrix(0,ncol=bins))
}
}
results <- runEvents(threshold, norm, unit, symdt, show, bins)
results[1]
tn
results[2]
results
results[1,1]
results[1,2]
results[2,2]
results[3,2]
results[3]
results[4]
results[5]
dim(results)
results[1:10]
results[1:3]
length(results)
num 0
results[8458600:8458665]
results[1:82927]
View(x)
active_nodes = results[1:82927]
active_nodes = results[8458665]
results[8458665]
dict <- vector(mode="list", lenght=3)
dict <- vector(mode="list", length=3)
names(dict) <- c("col1","col2","Test3")
dict[[1]] <- c(1,2,3,4,5,6)
dict[[2]] <- "cośtam cośtam załóżć gęślą jaźń"
dict[[3]] <- c(TRUE,TRUE,FALSE)
dict
#parameters
dataset = "mails"    #['mails',...]
norm = 1             #normalization of dt
unit = "hours"       #["secs","mins","hours","days","weeks","auto"] - do not use "auto"
symdt = 0.1          #delay between ploting in second
show = FALSE          #plot or not
threshold = 0.01     #level at which
bins = 100
loadData <- function(dataset){
if(dataset=="mails"){
data = read.csv2("manufacturing.csv")
return(data)
}
}
findAllNodes <- function(data){
tn <- graph.empty(directed=FALSE)
for(i in 1:nrow(data)){
s = toString(data[i,1])
r = toString(data[i,2])
#add new nodes if not exist
if(length(which(V(tn)$name == s))==0){
tn <- tn + vertex(s, infected=FALSE)
print(paste("Node",s,"added.",sep=" "))
}
if(length(which(V(tn)$name == r))==0){
tn <- tn + vertex(r, infected=FALSE)
print(paste("Node",r,"added.",sep=" "))
}
}
return(tn)
}
computeProbability <- function(){
return(1)
}
recomputeWeights <- function(n, dt, norm, tr){
todelete <- list()
for(edge in E(n)){
nlt <- E(n)[edge]$lt + (dt/norm)
nw <- exp(-nlt)
E(n)[edge]$weight <- nw
if(nw < tr){
todelete <- append(todelete,edge)
}else{
E(n)[edge]$lt <- nlt
}
}
n <- delete.edges(n,todelete)
return(n)
}
countWeights <- function(n,bins){
if(ecount(n)>0){
h=hist(E(n)$weight,breaks=bins,plot=FALSE)
return(h$counts)
}else{
return(matrix(0,ncol=bins))
}
}
countActiveNodes <- function (n){
an = 0
components = decompose.graph(n)
cn = 0
for(x in components){
if(ecount(x)>0){
an = an + vcount(x)
cn = cn + 1
}
}
return(c(an,cn))
}
runEvents <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Progress","%",1,nrow(data))
lastEventTime = as.POSIXct(data[1,3])
anCnPerEvent = matrix(c(0,0),ncol=2)
weightHist = matrix(ncol = bins)
for(i in 1:nrow(data)){
#read next event
s = toString(data[i,1])
r = toString(data[i,2])
t = as.POSIXct(data[i,3])
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 0
E(tn,P=c(s,r))$lt <- 0
}
#forgetting
tn <- recomputeWeights(tn, dt, norm, tr)
#count active nodes and components
an_cn <- countActiveNodes(tn)
#count weights and prepare histogram
h <- countWeights(tn,bins)
weightHist <- rbind(weightHist,h)
anCnPerEvent <- rbind(anCnPerEvent,an_cn)
#an <- temp[1]
#cn <- temp[2]
#print(paste("# of active nodes:",toString(an)," # of components:",toString(cn),sep=""))
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
#removing vertex - removes edges connected to removed vertex: tn <- delete.vertices(tn,'name')
#removing edges - does not removing vertex: tn <- delete.edges(tn,E(tn,c("3","6")))
}
close(pb)
results <- vector(mode = "list", length = 3)
results[[1]]=tn
results[[2]]=anCnPerEvent
results[[3]]=weightHist
return(results)
}
results <- runEvents(threshold, norm, unit, symdt, show, bins)
warnings()
results[[1]]
results[[2]]
results[[3]]
an_cp=results[[2]]
an_cp[1]
an_cp[[1]]
an_cp
View(an_cp)
an_cp[1,]
an_cp[,1]
an_cp[,2]
typeof(an_cp[,2])
active_nodes <- typeof(an_cp[,2])
list(active_nodes)
class(active_nodes)
length(active_nodes)
active_nodes <- typeof(an_cp[:,2])
active_nodes <- an_cp[,2]
active_nodes
dim(active_nodes) <- c(1,)
dim(active_nodes) <- c(1,82928)
View(active_nodes)
typeof(active_nodes)
dim(active_nodes) <- c(82928,1)
View(active_nodes)
typeof(active_nodes)
class(active_nodes)
plot(active_nodes)
plot(active_nodes,type="l")
components <- active_nodes
active_nodes <- an_cp[,3]
active_nodes <- an_cp[,1]
dim(active_nodes) <- c(82928,1)
View(active_nodes)
plot(active_nodes,type="l")
plot(components,type="l")
write(results, file="results_1")
save(results, file="results_1")
exp(-1)
exp(1)
exp(0)
max = 0
t = as.POSIXct(data[1,3])
for(i in 2:nrow(data)){
if(max<as.POSIXct(data[i,3])){
for(i in 2:nrow(data)){
max = 0
t = as.POSIXct(data[1,3])
for(i in 2:nrow(data)){
lt = as.POSIXct(data[i,3])
dt = as.numeric(difftime(t,lt, units='hours'))
if(dt>max){
max = dt
}
t = lt
}
max = 0
t = as.POSIXct(data[1,3])
pb <- tkProgressBar("Finding max difference time", "Progress",
0, nrow(data), 0)
for(i in 2:nrow(data)){
lt = as.POSIXct(data[i,3])
dt = as.numeric(difftime(t,lt, units='hours'))
if(dt>max){
max = dt
}
t = lt
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
}
close(pb)
max
max = 0
t = as.POSIXct(data[1,3])
pb <- tkProgressBar("Finding max difference time", "Progress",
0, nrow(data), 0)
for(i in 2:nrow(data)){
lt = as.POSIXct(data[i,3])
dt = as.numeric(difftime(t,lt, units='hours'))
if(dt>max){
max <<- dt
}
t = lt
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
}
close(pb)
print(max,dt)
print(paste(toString(max),toString(dt)))
max = 0
t = as.POSIXct(data[1,3])
pb <- tkProgressBar("Finding max difference time", "Progress",
0, nrow(data), 0)
for(i in 2:nrow(data)){
lt = as.POSIXct(data[i,3])
dt = as.numeric(difftime(t,lt, units='hours'))
print(paste(toString(max),toString(dt)))
if(dt>max){
max <<- dt
}
t = lt
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
}
max = 0
t = as.POSIXct(data[1,3])
pb <- tkProgressBar("Finding max difference time", "Progress",
0, nrow(data), 0)
for(i in 2:nrow(data)){
lt = as.POSIXct(data[i,3])
dt = as.numeric(difftime(lt,t, units='hours'))
print(paste(toString(max),toString(dt)))
if(dt>max){
max <<- dt
}
t = lt
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
}
close(pb)
max = 0
t = as.POSIXct(data[1,3])
pb <- tkProgressBar("Finding max difference time", "Progress",
0, nrow(data), 0)
for(i in 2:nrow(data)){
lt = as.POSIXct(data[i,3])
dt = as.numeric(difftime(lt,t, units='hours'))
print(paste(toString(max),toString(dt)))
if(dt>max){
max <- dt
}
t = lt
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
}
close(pb)
max
exp(-max)
exp(-10)
exp(-5)
exp(-6)
exp(-7)
exp(-8)
exp(-9)
dts = matrix(c(0),ncol=1)
t = as.POSIXct(data[1,3])
pb <- tkProgressBar("Finding max difference time", "Progress",
0, nrow(data), 0)
for(i in 2:nrow(data)){
lt = as.POSIXct(data[i,3])
dt = as.numeric(difftime(lt,t, units='hours'))
dts = rbind(dts,dt)
t = lt
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
}
close(pb)
dts
dts[1]
dts[,1]
hist(dts[,1],breaks=100,plot=TRUE)
boxplot(dts[,1])
hist(dts[,1],breaks=100,plot=TRUE)
dts_distr = hist(dts[,1],breaks=100,plot=TRUE)
dts_distr
dts_distr#breaks
dts_distr[,1]#breaks
dts_distr[1]#breaks
breaks = dts_distr[1]#breaks
counts = dts_distr[1]#counts
counts
counts = dts_distr[2]#counts
counts
dim(counts) <- c(127,1)
dim(counts[1]) <- c(127,1)
counts[[1]]
dim(counts[[1]]) <- c(127,1)
dim(counts[[1]]) <- c(126,1)
counts = counts[[1]]
dim(counts) <- c(126,1)
counts
breaks = breaks[[1]]
dim(breaks) <- c(126,1)
dim(breaks) <- c(127,1)
hist = cbind(breaks,counts)
hist = cbind(breaks[1:126],counts)
hist
dtsdistr = hist
rm(hist)
plot(dts_distr$mids, dts_distr$density, log="y", type='b')
plot(dts_distr$mids, dts_distr$density, log="y",)
plot(dts_distr$mids, dts_distr$density, log="y")
plot(dts_distr$mids, dts_distr$density, log="y", type='b')
plot(dts_distr$mids, dts_distr$counts, log="y", type='b')
hist
dtsdistr
exp(-15)
View(dtsdistr)
exp(-7)
exp(-4)
exp(-5)
exp(-4,5)
exp(-4.5)
exp(-62.5)
