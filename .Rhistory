x
x <- NULL
x<-c(x,"cos")
x<-c(x,"cos2")
x
below = NULL
for(i in (1:length(an))){
if(an[i]<50){
below <- c(below,i)
}
}
below
data["EventDate"][80901]
data["EventDate",80901]
data["EventDate"]
data["EventDate"][80901]
data["EventDate"][1,80901]
data["EventDate"][80901,1]
data["EventDate"][5,1]
data["EventDate"][6,1]
data["EventDate"][100,1]
data["EventDate"][101,1]
data["EventDate"][102,1]
data[["EventDate"]][102,1]
data[["EventDate"]][102]
data[["EventDate"]][102][1]
data[["EventDate"]][102][[1]]
below = NULL
for(i in (1:length(an))){
if(an[i]<50){
below <- c(below,data[["EventDate"]][i])
}
}
below
for(i in (1:length(an))){
if(an[i]<50){
below <- c(below,data[["EventDate"]][i])
}
}
below
below = NULL
for(i in (1:length(an))){
if(an[i]<50){
below <- c(below,data[["EventDate"]][i])
}
}
below
data[["EventDate"]][2]
d1 <- data[["EventDate"]][2]
d1
d1 <- data[["EventDate"]][2,2]
d1 <- data[["EventDate"]][2,]
d1 <- data[["EventDate"]][,2]
d1 <- data[["EventDate"]][2]
length(d1)
year(d1)
runInfection <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Infection progress","%",1,nrow(data))
lastEventTime = as.POSIXct(data[1,3])
bad_one = 1000     #event number when infection starts
gamma = 1
infT = 0
#for(i in 1:50){
for(i in 1:(nrow(data)-1)){
ip=infectionProgress(tn)
if(ip>0.5){
print("STOP!")
break
}
#read next event
s = toString(data[i,1])   #sender
r = toString(data[i,2])   #reciever
t = as.POSIXct(data[i,3]) #time (N_i)
t_next = as.POSIXct(data[i+1,3])
if(i==bad_one){
#make sender as bad one
V(tn)[s]$infected = TRUE
}
if(i>=bad_one){ #TODO:
#randomly draw a time for next infection
infT = rexp(1,rate=gamma)
t_0 = t
IS = countIS(tn)
if((t_0 + infT/IS)<t_next){
t_0 = t_0+(infT/IS)
#infect!
for(v in V(tn)[V(tn)$infected==TRUE]){
toinf = sample((V(tn)[neighbors(tn,v)])[V(tn)[neighbors(tn,v)]$infected==FALSE],1)
V(tn)[toinf]$infected <- TRUE
}
}else{
delta = t_next - t_0
infT = infT - delta*IS
t_0 = t_next
}
}
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#forgetting
tn <- recomputeWeights(tn, dt, norm, tr)
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 1
E(tn,P=c(s,r))$lt <- 0
}
#output
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
}
close(pb)
results <- vector(mode = "list", length = 3)
names(results) <- c("tn","an","wh")
results[[1]]=tn
results[[2]]=anCnPerEvent
results[[3]]=weightHist
return(results)
}
runInfection <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Infection progress","%",1,nrow(data))
lastEventTime = as.POSIXct(data[1,3])
bad_one = 1000     #event number when infection starts
step = 0
gamma = 1
infT = 0
#for(i in 1:50){
for(i in 1:(nrow(data)-1)){
step += 1
ip=infectionProgress(tn)
if(ip>0.5){
print("STOP!")
break
}
#read next event
s = toString(data[i,1])   #sender
r = toString(data[i,2])   #reciever
t = as.POSIXct(data[i,3]) #time (N_i)
t_next = as.POSIXct(data[i+1,3])
if(i==bad_one){
#make sender as bad one
V(tn)[s]$infected = TRUE
}
if(i>=bad_one){ #TODO:
#randomly draw a time for next infection
infT = rexp(1,rate=gamma)
t_0 = t
IS = countIS(tn)
if((t_0 + infT/IS)<t_next){
t_0 = t_0+(infT/IS)
#infect!
for(v in V(tn)[V(tn)$infected==TRUE]){
toinf = sample((V(tn)[neighbors(tn,v)])[V(tn)[neighbors(tn,v)]$infected==FALSE],1)
V(tn)[toinf]$infected <- TRUE
}
}else{
delta = t_next - t_0
infT = infT - delta*IS
t_0 = t_next
}
}
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#forgetting
tn <- recomputeWeights(tn, dt, norm, tr)
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 1
E(tn,P=c(s,r))$lt <- 0
}
#output
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
}
close(pb)
results <- vector(mode = "list", length = 3)
names(results) <- c("tn","an","wh")
results[[1]]=tn
results[[2]]=anCnPerEvent
results[[3]]=weightHist
return(results)
}
runInfection <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Infection progress","%",1,nrow(data))
lastEventTime = as.POSIXct(data[1,3])
bad_one = 1000     #event number when infection starts
step = 0
gamma = 1
infT = 0
#for(i in 1:50){
for(i in 1:(nrow(data)-1)){
step = step + 1
ip=infectionProgress(tn)
if(ip>0.5){
print("STOP!")
break
}
#read next event
s = toString(data[i,1])   #sender
r = toString(data[i,2])   #reciever
t = as.POSIXct(data[i,3]) #time (N_i)
t_next = as.POSIXct(data[i+1,3])
if(i==bad_one){
#make sender as bad one
V(tn)[s]$infected = TRUE
}
if(i>=bad_one){ #TODO:
#randomly draw a time for next infection
infT = rexp(1,rate=gamma)
t_0 = t
IS = countIS(tn)
if((t_0 + infT/IS)<t_next){
t_0 = t_0+(infT/IS)
#infect!
for(v in V(tn)[V(tn)$infected==TRUE]){
toinf = sample((V(tn)[neighbors(tn,v)])[V(tn)[neighbors(tn,v)]$infected==FALSE],1)
V(tn)[toinf]$infected <- TRUE
}
}else{
delta = t_next - t_0
infT = infT - delta*IS
t_0 = t_next
}
}
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#forgetting
tn <- recomputeWeights(tn, dt, norm, tr)
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 1
E(tn,P=c(s,r))$lt <- 0
}
#output
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
}
close(pb)
results <- vector(mode = "list", length = 3)
names(results) <- c("tn","an","wh")
results[[1]]=tn
results[[2]]=anCnPerEvent
results[[3]]=weightHist
return(results)
}
runInfection <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Events progress","%",1,nrow(data))
ib = tkProgressBar("Infection progress","%",1,vcount(tn))
lastEventTime = as.POSIXct(data[1,3])
bad_one = 1000     #event number when infection starts
step = 0
infected = 0
gamma = 1
infT = 0
#for(i in 1:50){
for(i in 1:(nrow(data)-1)){
step = step + 1
ip=infectionProgress(tn)
if(ip>0.5){
print("STOP!")
break
}
#read next event
s = toString(data[i,1])   #sender
r = toString(data[i,2])   #reciever
t = as.POSIXct(data[i,3]) #time (N_i)
t_next = as.POSIXct(data[i+1,3])
if(i==bad_one){
#make sender as bad one
V(tn)[s]$infected = TRUE
infected = infected + 1
}
if(i>=bad_one){ #TODO:
#randomly draw a time for next infection
infT = rexp(1,rate=gamma)
t_0 = t
IS = countIS(tn)
if((t_0 + infT/IS)<t_next){
t_0 = t_0+(infT/IS)
#infect!
for(v in V(tn)[V(tn)$infected==TRUE]){
toinf = sample((V(tn)[neighbors(tn,v)])[V(tn)[neighbors(tn,v)]$infected==FALSE],1)
V(tn)[toinf]$infected <- TRUE
infected = infected + 1
info <- paste(toString(infected),"/",toString(vcount(tn))," done",sep="")
setTkProgressBar(ib,infected,info)
}
}else{
delta = t_next - t_0
infT = infT - delta*IS
t_0 = t_next
}
}
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#forgetting
tn <- recomputeWeights(tn, dt, norm, tr)
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 1
E(tn,P=c(s,r))$lt <- 0
}
#output
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
}
close(pb)
results <- vector(mode = "list", length = 3)
names(results) <- c("tn","an","wh")
results[[1]]=tn
results[[2]]=anCnPerEvent
results[[3]]=weightHist
return(results)
}
runInfection(threshold, norm, unit, symdt, show, bins)
library("tcltk", lib.loc="C:/Program Files/R/R-3.0.0/library")
runInfection(threshold, norm, unit, symdt, show, bins)
countIS <- function(tn){
is = 0
edges = get.edges(tn,E(tn))
tryCatch({
for(i in 1:ecount(tn)){
v1 <- V(tn)[edges[i,1]]$infected
v2 <- V(tn)[edges[i,2]]$infected
print(toString(v1),toString(v2))
if(xor(v1,v2)){
is=is+1
}
}
return(is)
}, finally = {
return(0)
})
}
infectionProgress <- function(tn){
n=0
for(v in V(tn)){
if(V(tn)[v]$infected==TRUE){
n = n+1
}
}
progress=(n/vcount(tn))
return(progress)
}
runInfection(threshold, norm, unit, symdt, show, bins)
V(tn)
tn.V
detach("package:tcltk", unload=TRUE)
library("igraph", lib.loc="~/R/win-library/3.0")
library("tcltk", lib.loc="C:/Program Files/R/R-3.0.0/library")
runInfection(threshold, norm, unit, symdt, show, bins)
runInfection(threshold, norm, unit, symdt, show, bins)
save.image("C:/Users/MKul/Desktop/exf/ExF.RData")
load("D:/ExF/env.RData")
load("d:/ExF/res_mob_epid_a30/epid_full_sym_mob_4_1_27001")
results_mob_a30
results_mob_a30["inf_distr"]
results_mob_a30["inf_distr",]
results_mob_a30[,"inf_distr"]
plot(results_mob_a30[,"inf_distr"],type="l")
plot(results_mob_a30[,"inf_distr"][0],type="l")
plot(results_mob_a30[,"inf_distr"][1],type="l")
results_mob_a30[,"inf_distr"]
results_mob_a30[,"inf_distr"]["results"]
results_mob_a30[,"inf_distr"][["results"]
]
plot(results_mob_a30[,"inf_distr"][["results"]],type="l")
results_mob_a30
plot(results_mob_a30[,"number_of_IS"][["results"]],type="l")
plot(results_mob_a30[,"number_of_infected"][["results"]],type="l")
results_mob_a30[,"number_of_infected"]
plot(results_mob_a30[,"steps_time"][["results"]],type="l")
load("d:/ExF/res_mob_epid_a30/epid_full_sym_mob_4_2_27001")
results_mob_a30[,"number_of_infected"]
plot(results_mob_a30[,"steps_time"][["results"]],type="l")
plot(results_mob_a30[,"inf_distr"][["results"]],type="l")
rm(results_mob_a30)
load("d:/ExF/res_mob_epid_a30/epid_full_sym_mob_4_2_27001")
plot(results_mob_a30[,"inf_distr"][["results"]],type="l")
return
test1 <- function(a,b){
c<-a+b
return
}
test1(1,2)
load("d:/ExF/epid_full_sym_mob_7_1_27001")
results_mob_a30
results_mob_a30[1,]
results_mob_a30[,1]
results_mob_a30
results_mob_a30[,3]
results_mob_a30["inf_distr"]
results_mob_a30["inf_distr"][1]
results_mob_a30["inf_distr"][[2]]
results_mob_a30["inf_distr"][2
]
results_mob_a30[["inf_distr"]]
results_mob_a30[,["inf_distr"]]
results_mob_a30
results_mob_a30[1,2]
results_mob_a30[2,2]
results_mob_a30[3,2]
results_mob_a30[2,5]
results_mob_a30[2,4]
plot(results_mob_a30[2,4])
plot(results_mob_a30[[2,4]])
source('D:/ExF/ExF_epid_mob_a30.R')
library("doParallel", lib.loc="~/R/win-library/3.0")
library("foreach", lib.loc="~/R/win-library/3.0")
library("igraph", lib.loc="~/R/win-library/3.0")
library("iterators", lib.loc="~/R/win-library/3.0")
source('D:/ExF/ExF_epid_mob_a30.R')
warnings
warnings()
source('D:/ExF/ExF_epid_mob_a30.R')
library("logging", lib.loc="~/R/win-library/3.0")
source('D:/ExF/ExF_epid_mob_a30.R')
source('D:/ExF/ExF_epid_mob_a30.R')
loginfo(123)
source('D:/ExF/ExF_epid_mob_a30.R')
source('D:/ExF/ExF_epid_mob_a30.R')
source('D:/ExF/ExF_epid_mob_a30.R')
source('D:/ExF/ExF_epid_mob_a30.R')
debugSource('D:/ExF/ExF_epid_mob_a30.R')
debugSource('D:/ExF/ExF_epid_mob_a30.R')
debugSource('D:/ExF/ExF_epid_mob_a30.R')
debugSource('D:/ExF/ExF_epid_mob_a30.R')
source('D:/ExF/ExF_epid_mob_a30.R')
library("foreach", lib.loc="~/R/win-library/3.0")
library("doParallel", lib.loc="~/R/win-library/3.0")
library("igraph", lib.loc="~/R/win-library/3.0")
library("iterators", lib.loc="~/R/win-library/3.0")
source('D:/ExF/ExF_epid_mob_a30.R')
source('D:/ExF/ExF_epid_mob_a30.R')
paste(1,"asd")
source('D:/ExF/ExF_epid_mob_a30.R')
source('D:/ExF/ExF_epid_mob_a30.R')
0.5/0
alpha
0.5/0*alpha
t_0+(0.5/0)*alpha
t
t+(0.5/0)*alpha
t+(0.5/1)*alpha
load("d:/ExF/epid_full_sym_mob_48_4_27001")
results_mob_a30[1,2]
results_mob_a30[2,3]
results_mob_a30[2,4]
plot(results_mob_a30[[2,4]])
g=graph.empty()
V(g) <- vertices(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
V(g) <- vertices(g,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
g
g <- g + vertices(1,2,3,4)
g <- g + vertices(5,6,7,8,9,10,11,12,13,14,15)
g
g <- g + edges(1,4,2,4,3,5,6,5,4,8,5,8,7,8,9,8,10,8,12,8,13,8,12,7,11,12,11,14,12,15,14,15)
g
plot(g)
g <- g + edge(4,5)
g <- as.undirected(g)
g
plot(g)
evcent(g)
g <- g + edge(9,10)
g
plot(g)
evc <- evcent(g)
names(evc)
evc$vector
evc <- evcent(g)
evc$vector
detach("package:igraph", unload=TRUE)
install.packages("C:/Users/MKul/Downloads/igraph_0.7.999-548.tar.gz", repos = NULL, type = "source")
install.packages("magrittr")
install.packages("NMF")
install.packages("C:/Users/MKul/Downloads/igraph_0.7.999-548.tar.gz", repos = NULL, type = "source")
install.packages("irlba")
install.packages("C:/Users/MKul/Downloads/igraph_0.7.999-548.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/MKul/Downloads/lazyeval_0.1.10.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/MKul/Downloads/printr-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/MKul/Downloads/igraph_0.7.999-548.tar.gz", repos = NULL, type = "source")
