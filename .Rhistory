lt = as.POSIXct(data[i,3])
dt = as.numeric(difftime(lt,t, units='hours'))
print(paste(toString(max),toString(dt)))
if(dt>max){
max <- dt
}
t = lt
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
}
close(pb)
max
exp(-max)
exp(-10)
exp(-5)
exp(-6)
exp(-7)
exp(-8)
exp(-9)
dts = matrix(c(0),ncol=1)
t = as.POSIXct(data[1,3])
pb <- tkProgressBar("Finding max difference time", "Progress",
0, nrow(data), 0)
for(i in 2:nrow(data)){
lt = as.POSIXct(data[i,3])
dt = as.numeric(difftime(lt,t, units='hours'))
dts = rbind(dts,dt)
t = lt
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
}
close(pb)
dts
dts[1]
dts[,1]
hist(dts[,1],breaks=100,plot=TRUE)
boxplot(dts[,1])
hist(dts[,1],breaks=100,plot=TRUE)
dts_distr = hist(dts[,1],breaks=100,plot=TRUE)
dts_distr
dts_distr#breaks
dts_distr[,1]#breaks
dts_distr[1]#breaks
breaks = dts_distr[1]#breaks
counts = dts_distr[1]#counts
counts
counts = dts_distr[2]#counts
counts
dim(counts) <- c(127,1)
dim(counts[1]) <- c(127,1)
counts[[1]]
dim(counts[[1]]) <- c(127,1)
dim(counts[[1]]) <- c(126,1)
counts = counts[[1]]
dim(counts) <- c(126,1)
counts
breaks = breaks[[1]]
dim(breaks) <- c(126,1)
dim(breaks) <- c(127,1)
hist = cbind(breaks,counts)
hist = cbind(breaks[1:126],counts)
hist
dtsdistr = hist
rm(hist)
plot(dts_distr$mids, dts_distr$density, log="y", type='b')
plot(dts_distr$mids, dts_distr$density, log="y",)
plot(dts_distr$mids, dts_distr$density, log="y")
plot(dts_distr$mids, dts_distr$density, log="y", type='b')
plot(dts_distr$mids, dts_distr$counts, log="y", type='b')
hist
dtsdistr
exp(-15)
View(dtsdistr)
exp(-7)
exp(-4)
exp(-5)
exp(-4,5)
exp(-4.5)
exp(-62.5)
load("C:/Users/MKul/Dropbox/ExF/results/3_results")
results3 <- results
load("C:/Users/MKul/Dropbox/ExF/results/4_results")
results4 <- results
load("C:/Users/MKul/Dropbox/ExF/results/5_results")
results5 <- results
rm(results)
an_cp <- results3[["an"]]
an_cp[,1]
an <- an_cp[,1]
dim(an) <- c(82928,1)
an <- an[1:82927]
dim(an) <- c(82927,1)
data[["EventDate"]]
ed <- data[["EventDate"]]
dim(ed) <- c(82927,1)
an_time <- cbind(an,toString(ed)
)
View(an_time)
an_time <- cbind(an,ed)
an_time
df<-DataFrame()
df <- data.frame(an)
df
df <- data.frame(c(an,ed))
df
df <- data.frame(an,ed)
df
names(df) <- c("an","ed")
df
View(df)
plot(An ~ ED,df)
plot(an ~ ed,df)
plot(an)
plot(an,type='l')
x in an[x]<50
x %in% an[x]<50
length(an)
below = matrix(0)
View(below)
rbind(below,1)
c("")
c("").append("cos")
x<-c("")
x<c(x,"cos")
x<-c(x,"cos")
x
x <- NULL
c(x,cos)
x<-c(x,cos)
x
x <- NULL
x<-c(x,"cos")
x<-c(x,"cos2")
x
below = NULL
for(i in (1:length(an))){
if(an[i]<50){
below <- c(below,i)
}
}
below
data["EventDate"][80901]
data["EventDate",80901]
data["EventDate"]
data["EventDate"][80901]
data["EventDate"][1,80901]
data["EventDate"][80901,1]
data["EventDate"][5,1]
data["EventDate"][6,1]
data["EventDate"][100,1]
data["EventDate"][101,1]
data["EventDate"][102,1]
data[["EventDate"]][102,1]
data[["EventDate"]][102]
data[["EventDate"]][102][1]
data[["EventDate"]][102][[1]]
below = NULL
for(i in (1:length(an))){
if(an[i]<50){
below <- c(below,data[["EventDate"]][i])
}
}
below
for(i in (1:length(an))){
if(an[i]<50){
below <- c(below,data[["EventDate"]][i])
}
}
below
below = NULL
for(i in (1:length(an))){
if(an[i]<50){
below <- c(below,data[["EventDate"]][i])
}
}
below
data[["EventDate"]][2]
d1 <- data[["EventDate"]][2]
d1
d1 <- data[["EventDate"]][2,2]
d1 <- data[["EventDate"]][2,]
d1 <- data[["EventDate"]][,2]
d1 <- data[["EventDate"]][2]
length(d1)
year(d1)
runInfection <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Infection progress","%",1,nrow(data))
lastEventTime = as.POSIXct(data[1,3])
bad_one = 1000     #event number when infection starts
gamma = 1
infT = 0
#for(i in 1:50){
for(i in 1:(nrow(data)-1)){
ip=infectionProgress(tn)
if(ip>0.5){
print("STOP!")
break
}
#read next event
s = toString(data[i,1])   #sender
r = toString(data[i,2])   #reciever
t = as.POSIXct(data[i,3]) #time (N_i)
t_next = as.POSIXct(data[i+1,3])
if(i==bad_one){
#make sender as bad one
V(tn)[s]$infected = TRUE
}
if(i>=bad_one){ #TODO:
#randomly draw a time for next infection
infT = rexp(1,rate=gamma)
t_0 = t
IS = countIS(tn)
if((t_0 + infT/IS)<t_next){
t_0 = t_0+(infT/IS)
#infect!
for(v in V(tn)[V(tn)$infected==TRUE]){
toinf = sample((V(tn)[neighbors(tn,v)])[V(tn)[neighbors(tn,v)]$infected==FALSE],1)
V(tn)[toinf]$infected <- TRUE
}
}else{
delta = t_next - t_0
infT = infT - delta*IS
t_0 = t_next
}
}
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#forgetting
tn <- recomputeWeights(tn, dt, norm, tr)
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 1
E(tn,P=c(s,r))$lt <- 0
}
#output
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
}
close(pb)
results <- vector(mode = "list", length = 3)
names(results) <- c("tn","an","wh")
results[[1]]=tn
results[[2]]=anCnPerEvent
results[[3]]=weightHist
return(results)
}
runInfection <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Infection progress","%",1,nrow(data))
lastEventTime = as.POSIXct(data[1,3])
bad_one = 1000     #event number when infection starts
step = 0
gamma = 1
infT = 0
#for(i in 1:50){
for(i in 1:(nrow(data)-1)){
step += 1
ip=infectionProgress(tn)
if(ip>0.5){
print("STOP!")
break
}
#read next event
s = toString(data[i,1])   #sender
r = toString(data[i,2])   #reciever
t = as.POSIXct(data[i,3]) #time (N_i)
t_next = as.POSIXct(data[i+1,3])
if(i==bad_one){
#make sender as bad one
V(tn)[s]$infected = TRUE
}
if(i>=bad_one){ #TODO:
#randomly draw a time for next infection
infT = rexp(1,rate=gamma)
t_0 = t
IS = countIS(tn)
if((t_0 + infT/IS)<t_next){
t_0 = t_0+(infT/IS)
#infect!
for(v in V(tn)[V(tn)$infected==TRUE]){
toinf = sample((V(tn)[neighbors(tn,v)])[V(tn)[neighbors(tn,v)]$infected==FALSE],1)
V(tn)[toinf]$infected <- TRUE
}
}else{
delta = t_next - t_0
infT = infT - delta*IS
t_0 = t_next
}
}
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#forgetting
tn <- recomputeWeights(tn, dt, norm, tr)
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 1
E(tn,P=c(s,r))$lt <- 0
}
#output
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
}
close(pb)
results <- vector(mode = "list", length = 3)
names(results) <- c("tn","an","wh")
results[[1]]=tn
results[[2]]=anCnPerEvent
results[[3]]=weightHist
return(results)
}
runInfection <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Infection progress","%",1,nrow(data))
lastEventTime = as.POSIXct(data[1,3])
bad_one = 1000     #event number when infection starts
step = 0
gamma = 1
infT = 0
#for(i in 1:50){
for(i in 1:(nrow(data)-1)){
step = step + 1
ip=infectionProgress(tn)
if(ip>0.5){
print("STOP!")
break
}
#read next event
s = toString(data[i,1])   #sender
r = toString(data[i,2])   #reciever
t = as.POSIXct(data[i,3]) #time (N_i)
t_next = as.POSIXct(data[i+1,3])
if(i==bad_one){
#make sender as bad one
V(tn)[s]$infected = TRUE
}
if(i>=bad_one){ #TODO:
#randomly draw a time for next infection
infT = rexp(1,rate=gamma)
t_0 = t
IS = countIS(tn)
if((t_0 + infT/IS)<t_next){
t_0 = t_0+(infT/IS)
#infect!
for(v in V(tn)[V(tn)$infected==TRUE]){
toinf = sample((V(tn)[neighbors(tn,v)])[V(tn)[neighbors(tn,v)]$infected==FALSE],1)
V(tn)[toinf]$infected <- TRUE
}
}else{
delta = t_next - t_0
infT = infT - delta*IS
t_0 = t_next
}
}
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#forgetting
tn <- recomputeWeights(tn, dt, norm, tr)
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 1
E(tn,P=c(s,r))$lt <- 0
}
#output
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
}
close(pb)
results <- vector(mode = "list", length = 3)
names(results) <- c("tn","an","wh")
results[[1]]=tn
results[[2]]=anCnPerEvent
results[[3]]=weightHist
return(results)
}
runInfection <- function(tr, norm, unit, symdt, show, bins){
pb = tkProgressBar("Events progress","%",1,nrow(data))
ib = tkProgressBar("Infection progress","%",1,vcount(tn))
lastEventTime = as.POSIXct(data[1,3])
bad_one = 1000     #event number when infection starts
step = 0
infected = 0
gamma = 1
infT = 0
#for(i in 1:50){
for(i in 1:(nrow(data)-1)){
step = step + 1
ip=infectionProgress(tn)
if(ip>0.5){
print("STOP!")
break
}
#read next event
s = toString(data[i,1])   #sender
r = toString(data[i,2])   #reciever
t = as.POSIXct(data[i,3]) #time (N_i)
t_next = as.POSIXct(data[i+1,3])
if(i==bad_one){
#make sender as bad one
V(tn)[s]$infected = TRUE
infected = infected + 1
}
if(i>=bad_one){ #TODO:
#randomly draw a time for next infection
infT = rexp(1,rate=gamma)
t_0 = t
IS = countIS(tn)
if((t_0 + infT/IS)<t_next){
t_0 = t_0+(infT/IS)
#infect!
for(v in V(tn)[V(tn)$infected==TRUE]){
toinf = sample((V(tn)[neighbors(tn,v)])[V(tn)[neighbors(tn,v)]$infected==FALSE],1)
V(tn)[toinf]$infected <- TRUE
infected = infected + 1
info <- paste(toString(infected),"/",toString(vcount(tn))," done",sep="")
setTkProgressBar(ib,infected,info)
}
}else{
delta = t_next - t_0
infT = infT - delta*IS
t_0 = t_next
}
}
#time since last event
dt = as.numeric(difftime(t,lastEventTime, units=unit))
lastEventTime = t
#forgetting
tn <- recomputeWeights(tn, dt, norm, tr)
#add new link if not exist or set weight to 1 on existing link
if(tn[s,r]==0){
tn <- tn + edge(s,r,weight=1.0, lt=0)
}else{
tn[s,r] <- 1
E(tn,P=c(s,r))$lt <- 0
}
#output
info <- paste(toString(i),"/",toString(nrow(data))," done",sep="")
setTkProgressBar(pb,i, label=info)
#show network
if(show){
plot.igraph(tn, vertex.size=5, layout=layout.sphere(tn), edge.width=E(tn)$weight*10)
}
Sys.sleep(symdt)
}
close(pb)
results <- vector(mode = "list", length = 3)
names(results) <- c("tn","an","wh")
results[[1]]=tn
results[[2]]=anCnPerEvent
results[[3]]=weightHist
return(results)
}
runInfection(threshold, norm, unit, symdt, show, bins)
library("tcltk", lib.loc="C:/Program Files/R/R-3.0.0/library")
runInfection(threshold, norm, unit, symdt, show, bins)
countIS <- function(tn){
is = 0
edges = get.edges(tn,E(tn))
tryCatch({
for(i in 1:ecount(tn)){
v1 <- V(tn)[edges[i,1]]$infected
v2 <- V(tn)[edges[i,2]]$infected
print(toString(v1),toString(v2))
if(xor(v1,v2)){
is=is+1
}
}
return(is)
}, finally = {
return(0)
})
}
infectionProgress <- function(tn){
n=0
for(v in V(tn)){
if(V(tn)[v]$infected==TRUE){
n = n+1
}
}
progress=(n/vcount(tn))
return(progress)
}
runInfection(threshold, norm, unit, symdt, show, bins)
V(tn)
tn.V
detach("package:tcltk", unload=TRUE)
library("igraph", lib.loc="~/R/win-library/3.0")
library("tcltk", lib.loc="C:/Program Files/R/R-3.0.0/library")
runInfection(threshold, norm, unit, symdt, show, bins)
runInfection(threshold, norm, unit, symdt, show, bins)
save.image("C:/Users/MKul/Desktop/exf/ExF.RData")
